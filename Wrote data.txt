# model.py — minimal working model that ranks teams using SP+ and saves CSV

import glob, os, yaml
import pandas as pd
import numpy as np

# ---- load config
with open("config.yaml", "r", encoding="utf-8") as f:
    CFG = yaml.safe_load(f)
W = CFG.get("weights", {})
w_sp = float(W.get("sp_plus", 140.0))

# ---- find latest SP+ file
sp_files = sorted(glob.glob("data/sp_plus_*.csv"))
if not sp_files:
    raise FileNotFoundError("No SP+ file found in data/ (expected sp_plus_YYYY.csv). Run fetch_spplus.py first.")
sp_path = sp_files[-1]
sp = pd.read_csv(sp_path)

# CFBD format: year, team, rating, offenseRating, defenseRating, specialTeamsRating
sp = sp.rename(columns={
    "year": "season",
    "rating": "sp_ovr",
    "offenseRating": "sp_off",
    "defenseRating": "sp_def",
    "specialTeamsRating": "sp_st"
})
sp = sp[["season","team","sp_ovr","sp_off","sp_def","sp_st"]].copy()

# ---- z-score SP+ per season
def zscore(series: pd.Series) -> pd.Series:
    s = series.astype(float)
    std = s.std(ddof=0)
    if std == 0 or pd.isna(std):
        return (s - s.mean())  # all zeros if constant
    return (s - s.mean()) / std

sp["z_sp_ovr"] = sp.groupby("season")["sp_ovr"].transform(zscore)

# ---- minimal “power” = weighted z(SP+)
sp["power"] = w_sp * sp["z_sp_ovr"]
sp["rank"]  = sp.groupby("season")["power"].rank(ascending=False, method="dense").astype(int)

# ---- save output
os.makedirs("data", exist_ok=True)
out_cols = ["season","rank","team","power","sp_ovr","sp_off","sp_def","sp_st"]
sp[out_cols].sort_values(["season","rank"]).to_csv("data/team_power.csv", index=False)

print("✅ Wrote data/team_power.csv")
